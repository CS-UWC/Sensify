#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!csharp

#r "nuget: MongoDb.Driver"

#!csharp

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using MongoDB.Driver;
using MongoDB.Bson;

#!csharp

record ClusterInfo(int id);

record EndDevice(string devAddr, ClusterInfo cluster, string devEui);

record Link(string rel, string href);

record DataUpInfo(
    string id,
    EndDevice endDevice,
    bool pushed,
    int fport,
    int fCntDown,
    int fCntUp,
    bool confirmed,
    string payload,
    bool encrypted,
    float ulFrequency,
    string modulation,
    string dataRate,
    DateTime recvTime,
    long gwRecvTime,
    int gwCnt,
    bool adr,
    string codingRate,
    bool delayed,
    bool classB,
    string encodingType);

#!csharp

var mongoSettings = MongoClientSettings.FromConnectionString(Environment.GetEnvironmentVariable("MONGO_CONNECTION_STRING"));

var mongoClient = new MongoClient(mongoSettings);

var sensifyDb = mongoClient.GetDatabase("sensify");

#!csharp

var rawWncDataCollection = sensifyDb.GetCollection<DataUpInfo>("raw_wnc_data");

#!csharp

var deviceEui = "A81758FFFE0B5774";

var dataUp = await rawWncDataCollection.Find(x => x.endDevice.devEui == deviceEui).FirstOrDefaultAsync();

#!csharp

public enum ElsysTDataUpType : byte{
    Temp = 0x01, //temp 2 bytes -3276.8°C -->3276.7°C
    Rh = 0x02, //Humidity 1 byte  0-100%
    Acc = 0x03, //acceleration 3 bytes X,Y,Z -128 --> 127 +/-63=1G
    Light = 0x04, //Light 2 bytes 0-->65535 Lux
    Motion = 0x05, //No of motion 1 byte  0-255
    Co2 = 0x06, //Co2 2 bytes 0-65535 ppm
    Vdd = 0x07, //VDD 2byte 0-65535mV
    Analog1 = 0x08, //VDD 2byte 0-65535mV
    Gps = 0x09, //3bytes lat 3bytes long binary
    Pulse1 = 0x0A, //2bytes relative pulse count
    Pulse1Abs = 0x0B, //4bytes no 0->0xFFFFFFFF
    ExtTemp1 = 0x0C, //2bytes -3276.5C-->3276.5C
    ExtDigital = 0x0D, //1bytes value 1 or 0
    ExtDistance = 0x0E, //2bytes distance in mm
    AccMotion = 0x0F, //1byte number of vibration/motion
    IrTemp = 0x10, //2bytes internal temp 2bytes external temp -3276.5C-->3276.5C
    Occupancy = 0x11, //1byte data
    WaterLeak = 0x12, //1byte data 0-255
    GridEye = 0x13, //65byte temperature data 1byte ref+64byte external temp
    Pressure = 0x14, //4byte pressure data (hPa)
    Sound = 0x15, //2byte sound data (peak/avg)
    Pulse2 = 0x16, //2bytes 0-->0xFFFF
    Pulse2Abs = 0x17, //4bytes no 0->0xFFFFFFFF
    Analog2 = 0x18, //2bytes voltage in mV
    ExtTemp2 = 0x19, //2bytes -3276.5C-->3276.5C
    ExtDigital2 = 0x1A, // 1bytes value 1 or 0
    ExtAnalogUV = 0x1B, // 4 bytes signed int (uV)
    TVOC = 0x1C, // 2 bytes (ppb)
    Debug = 0x3D // 4bytes debug
}

#!csharp

record Measurement(string Field, float Value, string Units);

#!csharp

public static ReadOnlySpan<byte> ToHexBytes(this ReadOnlySpan<char> str){

    if(str.Length % 2 != 0 ) throw new ArgumentOutOfRangeException(nameof(str), str.ToString(), "Not a valid hex string.");
    var length = str.Length;
    Span<byte> results = new byte[length/2];

    for(var i = 0; i < length; i+=2){
        
        var char1 = str[i];
        var char2 = str[i+1];

        ref var value = ref results[i/2];

        value = char1 switch{
            >= '0' and <= '9' => (byte)(char1 - '0'),
            >= 'a' and <= 'f' => (byte)(char1 - 'a' + 10),
            >= 'A' and <= 'F' => (byte)(char1 - 'A' + 10),
            _ => throw new InvalidHexCharException(char1)
        };

        value = (byte)(value << 4);
        
        value |= char2 switch{
            >= '0' and <= '9' => (byte)(char2 - '0'),
            >= 'a' and <= 'f' => (byte)(char2 - 'a' + 10),
            >= 'A' and <= 'F' => (byte)(char2 - 'A' + 10),
            _ => throw new InvalidHexCharException(char2)
        };

    }

    return results;

}

public static ReadOnlySpan<byte> ToHexBytes(this string str) => str.AsSpan().ToHexBytes();

public class InvalidHexCharException : Exception
{
    public Char InvalidChar {get;}

    public InvalidHexCharException(char ch){
        InvalidChar = ch;
    }
}

#!csharp

IDictionary<string, object> decode(string payload){
    var bytes = payload.ToHexBytes();

    var result = new Dictionary<string, object>();

    for(var i = 0; i < bytes.Length; i++){

        switch((ElsysTDataUpType)bytes[i]){
            case ElsysTDataUpType.Temp:
                result["temperature"] = new {value = (short)((bytes[i+1] << 8) | bytes[i+2]) / 10f, unit = "C"};
                i+=2;
                break;

            case ElsysTDataUpType.Rh:
                result["humidity"] = new {value = bytes[i+1], unit = "%"};
                i++;
                break;

            case ElsysTDataUpType.Acc:
                result["x"] = new {value = (sbyte)bytes[i+1], unit = ""};
                result["y"] = new {value = (sbyte)bytes[i+2], unit = ""};
                result["z"] = new {value = (sbyte)bytes[i+3], unit = ""};
                
                i += 3;
                break;
            case ElsysTDataUpType.Light:
                result["light"] = new {value = (ushort)((bytes[i+1] << 8) | bytes[i+2]), unit = "lux"};
                i+= 2;
                break;
            case ElsysTDataUpType.Motion:
                result["motion"] = new {value = bytes[i+1], unit = ""};
                i++;
                break;
            case ElsysTDataUpType.Co2:
                result["co2"] = new {value = (ushort)((bytes[i+1] << 8) | bytes[i+2]), unit = "ppm"};
                i+= 2;
                break;
            case ElsysTDataUpType.Vdd:
                result["vdd"] = new {value = (ushort)((bytes[i+1] << 8) | bytes[i+2]), unit = "mV"};
                i+= 2;
                break;
            case ElsysTDataUpType.Analog1:
                result["analog1"] = new {value = (ushort)((bytes[i+1] << 8) | bytes[i+2]), unit = "mV"};
                i+= 2;
                break;
            case ElsysTDataUpType.Gps:
                result["lat"] = (bytes[i] | bytes[i+1] << 8 | bytes[i+2] << 16 | ((bytes[i+2] & 0x80) == 0x80 ? 0xFF << 24 : 0)) / 10_000.0f; 
                result["long"] = (bytes[i+3] | bytes[i+4] << 8 | bytes[i+5] << 16 | ((bytes[i+5] & 0x80) == 0x80 ? 0xFF << 24 : 0)) / 10_000.0f; 
                i += 5;
                break;
            case ElsysTDataUpType.Pulse1:
                result["pulse1"] = (bytes[i+1] << 8) | (bytes[i+2]);
                i+= 2;
                break;
            case ElsysTDataUpType.Pulse1Abs:
                result["pulse1"] = (uint)((bytes[i+1] << 24) | (bytes[i+2] << 16) | (bytes[i+3] << 8) | bytes[i+4]);
                i+= 4;
                break;
            case ElsysTDataUpType.ExtTemp1:
                result["externalTemperature"] = ((short)((bytes[i+1] << 8) | (bytes[i+2]))/10f);
                i+= 2;
                break;
            case ElsysTDataUpType.ExtDigital:
                result["digital"] = bytes[i + 1];
                i+= 1;
                break;
            case ElsysTDataUpType.ExtDistance:
                result["distance"] = (bytes[i+1] << 8) | bytes[i+2];
                i+= 2;
                break;
            case ElsysTDataUpType.AccMotion:
                result["accMotion"] = bytes[i+1];
                i+= 1;
                break;


            default: break;

        }
    }

    return result;

}

#!csharp

"0100e202290400270506060308070d62".ToHexBytes().ToArray()

#!csharp

decode("0100e202290400270506060308070d62")

#!csharp

decode("03bf01fe070e350b000000510d000f00")

#!csharp

dataUp.payload.ToHexBytes().ToArray()

#!csharp

decode(dataUp.payload)

#!csharp

dataUp.payload

#!javascript

function bin8dec(bin) {
    var num = bin & 0xFF;
    if (0x80 & num)
        num = -(0x0100 - num);
    return num;
}

console.log(bin8dec(129))

#!javascript

function bin16dec(bin) {
    var num = bin & 0xFFFF;
    if (0x8000 & num)
        num = -(0x010000 - num);
    return num;
}

console.log(bin16dec(255<<8+249)/10.0)

#!csharp

byte v1 = 164;
byte v2 = 7;

var v = (short)((v1 << 8) | v2) / 10f;

v

#!csharp

0x80 & 255

#!csharp

-(0x0100 - (-1))

#!csharp

byte b = 129;

(sbyte)b
